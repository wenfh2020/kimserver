// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_http_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_http_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_http_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_http_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_http_2eproto;
class HttpMsg;
class HttpMsgDefaultTypeInternal;
extern HttpMsgDefaultTypeInternal _HttpMsg_default_instance_;
class HttpMsg_HeadersEntry_DoNotUse;
class HttpMsg_HeadersEntry_DoNotUseDefaultTypeInternal;
extern HttpMsg_HeadersEntry_DoNotUseDefaultTypeInternal _HttpMsg_HeadersEntry_DoNotUse_default_instance_;
class HttpMsg_ParamsEntry_DoNotUse;
class HttpMsg_ParamsEntry_DoNotUseDefaultTypeInternal;
extern HttpMsg_ParamsEntry_DoNotUseDefaultTypeInternal _HttpMsg_ParamsEntry_DoNotUse_default_instance_;
class HttpMsg_Upgrade;
class HttpMsg_UpgradeDefaultTypeInternal;
extern HttpMsg_UpgradeDefaultTypeInternal _HttpMsg_Upgrade_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HttpMsg* Arena::CreateMaybeMessage<::HttpMsg>(Arena*);
template<> ::HttpMsg_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::HttpMsg_HeadersEntry_DoNotUse>(Arena*);
template<> ::HttpMsg_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::HttpMsg_ParamsEntry_DoNotUse>(Arena*);
template<> ::HttpMsg_Upgrade* Arena::CreateMaybeMessage<::HttpMsg_Upgrade>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class HttpMsg_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HttpMsg_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HttpMsg_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HttpMsg_HeadersEntry_DoNotUse();
  explicit HttpMsg_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HttpMsg_HeadersEntry_DoNotUse& other);
  static const HttpMsg_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HttpMsg_HeadersEntry_DoNotUse*>(&_HttpMsg_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "HttpMsg.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "HttpMsg.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_http_2eproto);
    return ::descriptor_table_http_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class HttpMsg_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HttpMsg_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HttpMsg_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HttpMsg_ParamsEntry_DoNotUse();
  explicit HttpMsg_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HttpMsg_ParamsEntry_DoNotUse& other);
  static const HttpMsg_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HttpMsg_ParamsEntry_DoNotUse*>(&_HttpMsg_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "HttpMsg.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "HttpMsg.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_http_2eproto);
    return ::descriptor_table_http_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class HttpMsg_Upgrade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HttpMsg.Upgrade) */ {
 public:
  inline HttpMsg_Upgrade() : HttpMsg_Upgrade(nullptr) {};
  virtual ~HttpMsg_Upgrade();

  HttpMsg_Upgrade(const HttpMsg_Upgrade& from);
  HttpMsg_Upgrade(HttpMsg_Upgrade&& from) noexcept
    : HttpMsg_Upgrade() {
    *this = ::std::move(from);
  }

  inline HttpMsg_Upgrade& operator=(const HttpMsg_Upgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpMsg_Upgrade& operator=(HttpMsg_Upgrade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HttpMsg_Upgrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpMsg_Upgrade* internal_default_instance() {
    return reinterpret_cast<const HttpMsg_Upgrade*>(
               &_HttpMsg_Upgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HttpMsg_Upgrade& a, HttpMsg_Upgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpMsg_Upgrade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpMsg_Upgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HttpMsg_Upgrade* New() const final {
    return CreateMaybeMessage<HttpMsg_Upgrade>(nullptr);
  }

  HttpMsg_Upgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HttpMsg_Upgrade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HttpMsg_Upgrade& from);
  void MergeFrom(const HttpMsg_Upgrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpMsg_Upgrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HttpMsg.Upgrade";
  }
  protected:
  explicit HttpMsg_Upgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_http_2eproto);
    return ::descriptor_table_http_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 2,
    kIsUpgradeFieldNumber = 1,
  };
  // string protocol = 2;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // bool is_upgrade = 1;
  void clear_is_upgrade();
  bool is_upgrade() const;
  void set_is_upgrade(bool value);
  private:
  bool _internal_is_upgrade() const;
  void _internal_set_is_upgrade(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HttpMsg.Upgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  bool is_upgrade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_http_2eproto;
};
// -------------------------------------------------------------------

class HttpMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HttpMsg) */ {
 public:
  inline HttpMsg() : HttpMsg(nullptr) {};
  virtual ~HttpMsg();

  HttpMsg(const HttpMsg& from);
  HttpMsg(HttpMsg&& from) noexcept
    : HttpMsg() {
    *this = ::std::move(from);
  }

  inline HttpMsg& operator=(const HttpMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpMsg& operator=(HttpMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HttpMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpMsg* internal_default_instance() {
    return reinterpret_cast<const HttpMsg*>(
               &_HttpMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HttpMsg& a, HttpMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HttpMsg* New() const final {
    return CreateMaybeMessage<HttpMsg>(nullptr);
  }

  HttpMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HttpMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HttpMsg& from);
  void MergeFrom(const HttpMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HttpMsg";
  }
  protected:
  explicit HttpMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_http_2eproto);
    return ::descriptor_table_http_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HttpMsg_Upgrade Upgrade;

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 9,
    kParamsFieldNumber = 11,
    kUrlFieldNumber = 8,
    kBodyFieldNumber = 10,
    kPathFieldNumber = 14,
    kUpgradeFieldNumber = 12,
    kTypeFieldNumber = 1,
    kHttpMajorFieldNumber = 2,
    kHttpMinorFieldNumber = 3,
    kContentLengthFieldNumber = 4,
    kMethodFieldNumber = 5,
    kStatusCodeFieldNumber = 6,
    kEncodingFieldNumber = 7,
    kKeepAliveFieldNumber = 13,
    kIsDecodingFieldNumber = 15,
  };
  // map<string, string> headers = 9;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // map<string, string> params = 11;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // string url = 8;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes body = 10;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // string path = 14;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .HttpMsg.Upgrade upgrade = 12;
  bool has_upgrade() const;
  private:
  bool _internal_has_upgrade() const;
  public:
  void clear_upgrade();
  const ::HttpMsg_Upgrade& upgrade() const;
  ::HttpMsg_Upgrade* release_upgrade();
  ::HttpMsg_Upgrade* mutable_upgrade();
  void set_allocated_upgrade(::HttpMsg_Upgrade* upgrade);
  private:
  const ::HttpMsg_Upgrade& _internal_upgrade() const;
  ::HttpMsg_Upgrade* _internal_mutable_upgrade();
  public:
  void unsafe_arena_set_allocated_upgrade(
      ::HttpMsg_Upgrade* upgrade);
  ::HttpMsg_Upgrade* unsafe_arena_release_upgrade();

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 http_major = 2;
  void clear_http_major();
  ::PROTOBUF_NAMESPACE_ID::int32 http_major() const;
  void set_http_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_http_major() const;
  void _internal_set_http_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 http_minor = 3;
  void clear_http_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 http_minor() const;
  void set_http_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_http_minor() const;
  void _internal_set_http_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 content_length = 4;
  void clear_content_length();
  ::PROTOBUF_NAMESPACE_ID::int32 content_length() const;
  void set_content_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_content_length() const;
  void _internal_set_content_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 method = 5;
  void clear_method();
  ::PROTOBUF_NAMESPACE_ID::int32 method() const;
  void set_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_method() const;
  void _internal_set_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status_code = 6;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 encoding = 7;
  void clear_encoding();
  ::PROTOBUF_NAMESPACE_ID::int32 encoding() const;
  void set_encoding(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_encoding() const;
  void _internal_set_encoding(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float keep_alive = 13;
  void clear_keep_alive();
  float keep_alive() const;
  void set_keep_alive(float value);
  private:
  float _internal_keep_alive() const;
  void _internal_set_keep_alive(float value);
  public:

  // bool is_decoding = 15;
  void clear_is_decoding();
  bool is_decoding() const;
  void set_is_decoding(bool value);
  private:
  bool _internal_is_decoding() const;
  void _internal_set_is_decoding(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HttpMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HttpMsg_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HttpMsg_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::HttpMsg_Upgrade* upgrade_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 http_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 http_minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 content_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 method_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 encoding_;
  float keep_alive_;
  bool is_decoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_http_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HttpMsg_Upgrade

// bool is_upgrade = 1;
inline void HttpMsg_Upgrade::clear_is_upgrade() {
  is_upgrade_ = false;
}
inline bool HttpMsg_Upgrade::_internal_is_upgrade() const {
  return is_upgrade_;
}
inline bool HttpMsg_Upgrade::is_upgrade() const {
  // @@protoc_insertion_point(field_get:HttpMsg.Upgrade.is_upgrade)
  return _internal_is_upgrade();
}
inline void HttpMsg_Upgrade::_internal_set_is_upgrade(bool value) {
  
  is_upgrade_ = value;
}
inline void HttpMsg_Upgrade::set_is_upgrade(bool value) {
  _internal_set_is_upgrade(value);
  // @@protoc_insertion_point(field_set:HttpMsg.Upgrade.is_upgrade)
}

// string protocol = 2;
inline void HttpMsg_Upgrade::clear_protocol() {
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HttpMsg_Upgrade::protocol() const {
  // @@protoc_insertion_point(field_get:HttpMsg.Upgrade.protocol)
  return _internal_protocol();
}
inline void HttpMsg_Upgrade::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:HttpMsg.Upgrade.protocol)
}
inline std::string* HttpMsg_Upgrade::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:HttpMsg.Upgrade.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& HttpMsg_Upgrade::_internal_protocol() const {
  return protocol_.Get();
}
inline void HttpMsg_Upgrade::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HttpMsg_Upgrade::set_protocol(std::string&& value) {
  
  protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.Upgrade.protocol)
}
inline void HttpMsg_Upgrade::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:HttpMsg.Upgrade.protocol)
}
inline void HttpMsg_Upgrade::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.Upgrade.protocol)
}
inline std::string* HttpMsg_Upgrade::_internal_mutable_protocol() {
  
  return protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HttpMsg_Upgrade::release_protocol() {
  // @@protoc_insertion_point(field_release:HttpMsg.Upgrade.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpMsg_Upgrade::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.Upgrade.protocol)
}

// -------------------------------------------------------------------

// HttpMsg

// int32 type = 1;
inline void HttpMsg::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::type() const {
  // @@protoc_insertion_point(field_get:HttpMsg.type)
  return _internal_type();
}
inline void HttpMsg::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void HttpMsg::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:HttpMsg.type)
}

// int32 http_major = 2;
inline void HttpMsg::clear_http_major() {
  http_major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::_internal_http_major() const {
  return http_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::http_major() const {
  // @@protoc_insertion_point(field_get:HttpMsg.http_major)
  return _internal_http_major();
}
inline void HttpMsg::_internal_set_http_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  http_major_ = value;
}
inline void HttpMsg::set_http_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_http_major(value);
  // @@protoc_insertion_point(field_set:HttpMsg.http_major)
}

// int32 http_minor = 3;
inline void HttpMsg::clear_http_minor() {
  http_minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::_internal_http_minor() const {
  return http_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::http_minor() const {
  // @@protoc_insertion_point(field_get:HttpMsg.http_minor)
  return _internal_http_minor();
}
inline void HttpMsg::_internal_set_http_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  http_minor_ = value;
}
inline void HttpMsg::set_http_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_http_minor(value);
  // @@protoc_insertion_point(field_set:HttpMsg.http_minor)
}

// int32 content_length = 4;
inline void HttpMsg::clear_content_length() {
  content_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::_internal_content_length() const {
  return content_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::content_length() const {
  // @@protoc_insertion_point(field_get:HttpMsg.content_length)
  return _internal_content_length();
}
inline void HttpMsg::_internal_set_content_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  content_length_ = value;
}
inline void HttpMsg::set_content_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_content_length(value);
  // @@protoc_insertion_point(field_set:HttpMsg.content_length)
}

// int32 method = 5;
inline void HttpMsg::clear_method() {
  method_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::_internal_method() const {
  return method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::method() const {
  // @@protoc_insertion_point(field_get:HttpMsg.method)
  return _internal_method();
}
inline void HttpMsg::_internal_set_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  method_ = value;
}
inline void HttpMsg::set_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:HttpMsg.method)
}

// int32 status_code = 6;
inline void HttpMsg::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::status_code() const {
  // @@protoc_insertion_point(field_get:HttpMsg.status_code)
  return _internal_status_code();
}
inline void HttpMsg::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void HttpMsg::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:HttpMsg.status_code)
}

// int32 encoding = 7;
inline void HttpMsg::clear_encoding() {
  encoding_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::_internal_encoding() const {
  return encoding_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpMsg::encoding() const {
  // @@protoc_insertion_point(field_get:HttpMsg.encoding)
  return _internal_encoding();
}
inline void HttpMsg::_internal_set_encoding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  encoding_ = value;
}
inline void HttpMsg::set_encoding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:HttpMsg.encoding)
}

// string url = 8;
inline void HttpMsg::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HttpMsg::url() const {
  // @@protoc_insertion_point(field_get:HttpMsg.url)
  return _internal_url();
}
inline void HttpMsg::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:HttpMsg.url)
}
inline std::string* HttpMsg::mutable_url() {
  // @@protoc_insertion_point(field_mutable:HttpMsg.url)
  return _internal_mutable_url();
}
inline const std::string& HttpMsg::_internal_url() const {
  return url_.Get();
}
inline void HttpMsg::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HttpMsg::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.url)
}
inline void HttpMsg::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:HttpMsg.url)
}
inline void HttpMsg::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.url)
}
inline std::string* HttpMsg::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HttpMsg::release_url() {
  // @@protoc_insertion_point(field_release:HttpMsg.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpMsg::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.url)
}

// map<string, string> headers = 9;
inline int HttpMsg::_internal_headers_size() const {
  return headers_.size();
}
inline int HttpMsg::headers_size() const {
  return _internal_headers_size();
}
inline void HttpMsg::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HttpMsg::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HttpMsg::headers() const {
  // @@protoc_insertion_point(field_map:HttpMsg.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HttpMsg::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HttpMsg::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:HttpMsg.headers)
  return _internal_mutable_headers();
}

// bytes body = 10;
inline void HttpMsg::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HttpMsg::body() const {
  // @@protoc_insertion_point(field_get:HttpMsg.body)
  return _internal_body();
}
inline void HttpMsg::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:HttpMsg.body)
}
inline std::string* HttpMsg::mutable_body() {
  // @@protoc_insertion_point(field_mutable:HttpMsg.body)
  return _internal_mutable_body();
}
inline const std::string& HttpMsg::_internal_body() const {
  return body_.Get();
}
inline void HttpMsg::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HttpMsg::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.body)
}
inline void HttpMsg::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:HttpMsg.body)
}
inline void HttpMsg::set_body(const void* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.body)
}
inline std::string* HttpMsg::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HttpMsg::release_body() {
  // @@protoc_insertion_point(field_release:HttpMsg.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpMsg::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.body)
}

// map<string, string> params = 11;
inline int HttpMsg::_internal_params_size() const {
  return params_.size();
}
inline int HttpMsg::params_size() const {
  return _internal_params_size();
}
inline void HttpMsg::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HttpMsg::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HttpMsg::params() const {
  // @@protoc_insertion_point(field_map:HttpMsg.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HttpMsg::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HttpMsg::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:HttpMsg.params)
  return _internal_mutable_params();
}

// .HttpMsg.Upgrade upgrade = 12;
inline bool HttpMsg::_internal_has_upgrade() const {
  return this != internal_default_instance() && upgrade_ != nullptr;
}
inline bool HttpMsg::has_upgrade() const {
  return _internal_has_upgrade();
}
inline void HttpMsg::clear_upgrade() {
  if (GetArena() == nullptr && upgrade_ != nullptr) {
    delete upgrade_;
  }
  upgrade_ = nullptr;
}
inline const ::HttpMsg_Upgrade& HttpMsg::_internal_upgrade() const {
  const ::HttpMsg_Upgrade* p = upgrade_;
  return p != nullptr ? *p : *reinterpret_cast<const ::HttpMsg_Upgrade*>(
      &::_HttpMsg_Upgrade_default_instance_);
}
inline const ::HttpMsg_Upgrade& HttpMsg::upgrade() const {
  // @@protoc_insertion_point(field_get:HttpMsg.upgrade)
  return _internal_upgrade();
}
inline void HttpMsg::unsafe_arena_set_allocated_upgrade(
    ::HttpMsg_Upgrade* upgrade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgrade_);
  }
  upgrade_ = upgrade;
  if (upgrade) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HttpMsg.upgrade)
}
inline ::HttpMsg_Upgrade* HttpMsg::release_upgrade() {
  
  ::HttpMsg_Upgrade* temp = upgrade_;
  upgrade_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::HttpMsg_Upgrade* HttpMsg::unsafe_arena_release_upgrade() {
  // @@protoc_insertion_point(field_release:HttpMsg.upgrade)
  
  ::HttpMsg_Upgrade* temp = upgrade_;
  upgrade_ = nullptr;
  return temp;
}
inline ::HttpMsg_Upgrade* HttpMsg::_internal_mutable_upgrade() {
  
  if (upgrade_ == nullptr) {
    auto* p = CreateMaybeMessage<::HttpMsg_Upgrade>(GetArena());
    upgrade_ = p;
  }
  return upgrade_;
}
inline ::HttpMsg_Upgrade* HttpMsg::mutable_upgrade() {
  // @@protoc_insertion_point(field_mutable:HttpMsg.upgrade)
  return _internal_mutable_upgrade();
}
inline void HttpMsg::set_allocated_upgrade(::HttpMsg_Upgrade* upgrade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upgrade_;
  }
  if (upgrade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upgrade);
    if (message_arena != submessage_arena) {
      upgrade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgrade, submessage_arena);
    }
    
  } else {
    
  }
  upgrade_ = upgrade;
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.upgrade)
}

// float keep_alive = 13;
inline void HttpMsg::clear_keep_alive() {
  keep_alive_ = 0;
}
inline float HttpMsg::_internal_keep_alive() const {
  return keep_alive_;
}
inline float HttpMsg::keep_alive() const {
  // @@protoc_insertion_point(field_get:HttpMsg.keep_alive)
  return _internal_keep_alive();
}
inline void HttpMsg::_internal_set_keep_alive(float value) {
  
  keep_alive_ = value;
}
inline void HttpMsg::set_keep_alive(float value) {
  _internal_set_keep_alive(value);
  // @@protoc_insertion_point(field_set:HttpMsg.keep_alive)
}

// string path = 14;
inline void HttpMsg::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HttpMsg::path() const {
  // @@protoc_insertion_point(field_get:HttpMsg.path)
  return _internal_path();
}
inline void HttpMsg::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:HttpMsg.path)
}
inline std::string* HttpMsg::mutable_path() {
  // @@protoc_insertion_point(field_mutable:HttpMsg.path)
  return _internal_mutable_path();
}
inline const std::string& HttpMsg::_internal_path() const {
  return path_.Get();
}
inline void HttpMsg::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HttpMsg::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.path)
}
inline void HttpMsg::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:HttpMsg.path)
}
inline void HttpMsg::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.path)
}
inline std::string* HttpMsg::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HttpMsg::release_path() {
  // @@protoc_insertion_point(field_release:HttpMsg.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpMsg::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.path)
}

// bool is_decoding = 15;
inline void HttpMsg::clear_is_decoding() {
  is_decoding_ = false;
}
inline bool HttpMsg::_internal_is_decoding() const {
  return is_decoding_;
}
inline bool HttpMsg::is_decoding() const {
  // @@protoc_insertion_point(field_get:HttpMsg.is_decoding)
  return _internal_is_decoding();
}
inline void HttpMsg::_internal_set_is_decoding(bool value) {
  
  is_decoding_ = value;
}
inline void HttpMsg::set_is_decoding(bool value) {
  _internal_set_is_decoding(value);
  // @@protoc_insertion_point(field_set:HttpMsg.is_decoding)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_http_2eproto
