// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#include "http.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_http_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpMsg_HeadersEntry_DoNotUse_http_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_http_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpMsg_ParamsEntry_DoNotUse_http_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_http_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpMsg_Upgrade_http_2eproto;
class HttpMsg_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpMsg_HeadersEntry_DoNotUse> _instance;
} _HttpMsg_HeadersEntry_DoNotUse_default_instance_;
class HttpMsg_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpMsg_ParamsEntry_DoNotUse> _instance;
} _HttpMsg_ParamsEntry_DoNotUse_default_instance_;
class HttpMsg_UpgradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpMsg_Upgrade> _instance;
} _HttpMsg_Upgrade_default_instance_;
class HttpMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpMsg> _instance;
} _HttpMsg_default_instance_;
static void InitDefaultsscc_info_HttpMsg_http_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_default_instance_;
    new (ptr) ::HttpMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HttpMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HttpMsg_http_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HttpMsg_http_2eproto}, {
      &scc_info_HttpMsg_HeadersEntry_DoNotUse_http_2eproto.base,
      &scc_info_HttpMsg_ParamsEntry_DoNotUse_http_2eproto.base,
      &scc_info_HttpMsg_Upgrade_http_2eproto.base,}};

static void InitDefaultsscc_info_HttpMsg_HeadersEntry_DoNotUse_http_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::HttpMsg_HeadersEntry_DoNotUse();
  }
  ::HttpMsg_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpMsg_HeadersEntry_DoNotUse_http_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HttpMsg_HeadersEntry_DoNotUse_http_2eproto}, {}};

static void InitDefaultsscc_info_HttpMsg_ParamsEntry_DoNotUse_http_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::HttpMsg_ParamsEntry_DoNotUse();
  }
  ::HttpMsg_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpMsg_ParamsEntry_DoNotUse_http_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HttpMsg_ParamsEntry_DoNotUse_http_2eproto}, {}};

static void InitDefaultsscc_info_HttpMsg_Upgrade_http_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_Upgrade_default_instance_;
    new (ptr) ::HttpMsg_Upgrade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HttpMsg_Upgrade::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpMsg_Upgrade_http_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HttpMsg_Upgrade_http_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_http_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_http_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_http_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_http_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::HttpMsg_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HttpMsg_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HttpMsg_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HttpMsg_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HttpMsg_Upgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HttpMsg_Upgrade, is_upgrade_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg_Upgrade, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HttpMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HttpMsg, type_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, http_major_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, http_minor_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, content_length_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, method_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, status_code_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, encoding_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, url_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, headers_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, body_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, params_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, upgrade_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, keep_alive_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, path_),
  PROTOBUF_FIELD_OFFSET(::HttpMsg, is_decoding_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::HttpMsg_HeadersEntry_DoNotUse)},
  { 9, 16, sizeof(::HttpMsg_ParamsEntry_DoNotUse)},
  { 18, -1, sizeof(::HttpMsg_Upgrade)},
  { 25, -1, sizeof(::HttpMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HttpMsg_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HttpMsg_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HttpMsg_Upgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HttpMsg_default_instance_),
};

const char descriptor_table_protodef_http_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nhttp.proto\"\341\003\n\007HttpMsg\022\014\n\004type\030\001 \001(\005\022\022"
  "\n\nhttp_major\030\002 \001(\005\022\022\n\nhttp_minor\030\003 \001(\005\022\026"
  "\n\016content_length\030\004 \001(\005\022\016\n\006method\030\005 \001(\005\022\023"
  "\n\013status_code\030\006 \001(\005\022\020\n\010encoding\030\007 \001(\005\022\013\n"
  "\003url\030\010 \001(\t\022&\n\007headers\030\t \003(\0132\025.HttpMsg.He"
  "adersEntry\022\014\n\004body\030\n \001(\014\022$\n\006params\030\013 \003(\013"
  "2\024.HttpMsg.ParamsEntry\022!\n\007upgrade\030\014 \001(\0132"
  "\020.HttpMsg.Upgrade\022\022\n\nkeep_alive\030\r \001(\002\022\014\n"
  "\004path\030\016 \001(\t\022\023\n\013is_decoding\030\017 \001(\010\032.\n\014Head"
  "ersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
  "\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\032/\n\007Upgrade\022\022\n\nis_upgrade\030\001 \001(\010\022\020"
  "\n\010protocol\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_http_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_http_2eproto_sccs[4] = {
  &scc_info_HttpMsg_http_2eproto.base,
  &scc_info_HttpMsg_HeadersEntry_DoNotUse_http_2eproto.base,
  &scc_info_HttpMsg_ParamsEntry_DoNotUse_http_2eproto.base,
  &scc_info_HttpMsg_Upgrade_http_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_http_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_http_2eproto = {
  false, false, descriptor_table_protodef_http_2eproto, "http.proto", 504,
  &descriptor_table_http_2eproto_once, descriptor_table_http_2eproto_sccs, descriptor_table_http_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_http_2eproto::offsets,
  file_level_metadata_http_2eproto, 4, file_level_enum_descriptors_http_2eproto, file_level_service_descriptors_http_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_http_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_http_2eproto)), true);

// ===================================================================

HttpMsg_HeadersEntry_DoNotUse::HttpMsg_HeadersEntry_DoNotUse() {}
HttpMsg_HeadersEntry_DoNotUse::HttpMsg_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HttpMsg_HeadersEntry_DoNotUse::MergeFrom(const HttpMsg_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HttpMsg_HeadersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HttpMsg_HeadersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HttpMsg_ParamsEntry_DoNotUse::HttpMsg_ParamsEntry_DoNotUse() {}
HttpMsg_ParamsEntry_DoNotUse::HttpMsg_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HttpMsg_ParamsEntry_DoNotUse::MergeFrom(const HttpMsg_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HttpMsg_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HttpMsg_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HttpMsg_Upgrade::InitAsDefaultInstance() {
}
class HttpMsg_Upgrade::_Internal {
 public:
};

HttpMsg_Upgrade::HttpMsg_Upgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HttpMsg.Upgrade)
}
HttpMsg_Upgrade::HttpMsg_Upgrade(const HttpMsg_Upgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol(),
      GetArena());
  }
  is_upgrade_ = from.is_upgrade_;
  // @@protoc_insertion_point(copy_constructor:HttpMsg.Upgrade)
}

void HttpMsg_Upgrade::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HttpMsg_Upgrade_http_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_upgrade_ = false;
}

HttpMsg_Upgrade::~HttpMsg_Upgrade() {
  // @@protoc_insertion_point(destructor:HttpMsg.Upgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HttpMsg_Upgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HttpMsg_Upgrade::ArenaDtor(void* object) {
  HttpMsg_Upgrade* _this = reinterpret_cast< HttpMsg_Upgrade* >(object);
  (void)_this;
}
void HttpMsg_Upgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpMsg_Upgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HttpMsg_Upgrade& HttpMsg_Upgrade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HttpMsg_Upgrade_http_2eproto.base);
  return *internal_default_instance();
}


void HttpMsg_Upgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:HttpMsg.Upgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  is_upgrade_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpMsg_Upgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_upgrade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HttpMsg.Upgrade.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HttpMsg_Upgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HttpMsg.Upgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_upgrade = 1;
  if (this->is_upgrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_upgrade(), target);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.Upgrade.protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpMsg.Upgrade)
  return target;
}

size_t HttpMsg_Upgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HttpMsg.Upgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // bool is_upgrade = 1;
  if (this->is_upgrade() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpMsg_Upgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HttpMsg.Upgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpMsg_Upgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HttpMsg_Upgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpMsg.Upgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpMsg.Upgrade)
    MergeFrom(*source);
  }
}

void HttpMsg_Upgrade::MergeFrom(const HttpMsg_Upgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HttpMsg.Upgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.is_upgrade() != 0) {
    _internal_set_is_upgrade(from._internal_is_upgrade());
  }
}

void HttpMsg_Upgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HttpMsg.Upgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpMsg_Upgrade::CopyFrom(const HttpMsg_Upgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HttpMsg.Upgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpMsg_Upgrade::IsInitialized() const {
  return true;
}

void HttpMsg_Upgrade::InternalSwap(HttpMsg_Upgrade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_upgrade_, other->is_upgrade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpMsg_Upgrade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HttpMsg::InitAsDefaultInstance() {
  ::_HttpMsg_default_instance_._instance.get_mutable()->upgrade_ = const_cast< ::HttpMsg_Upgrade*>(
      ::HttpMsg_Upgrade::internal_default_instance());
}
class HttpMsg::_Internal {
 public:
  static const ::HttpMsg_Upgrade& upgrade(const HttpMsg* msg);
};

const ::HttpMsg_Upgrade&
HttpMsg::_Internal::upgrade(const HttpMsg* msg) {
  return *msg->upgrade_;
}
HttpMsg::HttpMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HttpMsg)
}
HttpMsg::HttpMsg(const HttpMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  params_.MergeFrom(from.params_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  if (from._internal_has_upgrade()) {
    upgrade_ = new ::HttpMsg_Upgrade(*from.upgrade_);
  } else {
    upgrade_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_decoding_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_decoding_));
  // @@protoc_insertion_point(copy_constructor:HttpMsg)
}

void HttpMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HttpMsg_http_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&upgrade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_decoding_) -
      reinterpret_cast<char*>(&upgrade_)) + sizeof(is_decoding_));
}

HttpMsg::~HttpMsg() {
  // @@protoc_insertion_point(destructor:HttpMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HttpMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete upgrade_;
}

void HttpMsg::ArenaDtor(void* object) {
  HttpMsg* _this = reinterpret_cast< HttpMsg* >(object);
  (void)_this;
}
void HttpMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HttpMsg& HttpMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HttpMsg_http_2eproto.base);
  return *internal_default_instance();
}


void HttpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:HttpMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  params_.Clear();
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && upgrade_ != nullptr) {
    delete upgrade_;
  }
  upgrade_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_decoding_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_decoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 http_major = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          http_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 http_minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          http_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 content_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          content_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 method = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 encoding = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          encoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HttpMsg.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> headers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes body = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> params = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .HttpMsg.Upgrade upgrade = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgrade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float keep_alive = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          keep_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string path = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HttpMsg.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_decoding = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          is_decoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HttpMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HttpMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 http_major = 2;
  if (this->http_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_http_major(), target);
  }

  // int32 http_minor = 3;
  if (this->http_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_http_minor(), target);
  }

  // int32 content_length = 4;
  if (this->content_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_content_length(), target);
  }

  // int32 method = 5;
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_method(), target);
  }

  // int32 status_code = 6;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_status_code(), target);
  }

  // int32 encoding = 7;
  if (this->encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_encoding(), target);
  }

  // string url = 8;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // map<string, string> headers = 9;
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.HeadersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.HeadersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HttpMsg_HeadersEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = HttpMsg_HeadersEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes body = 10;
  if (this->body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_body(), target);
  }

  // map<string, string> params = 11;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "HttpMsg.ParamsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HttpMsg_ParamsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = HttpMsg_ParamsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .HttpMsg.Upgrade upgrade = 12;
  if (this->has_upgrade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::upgrade(this), target, stream);
  }

  // float keep_alive = 13;
  if (!(this->keep_alive() <= 0 && this->keep_alive() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_keep_alive(), target);
  }

  // string path = 14;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HttpMsg.path");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_path(), target);
  }

  // bool is_decoding = 15;
  if (this->is_decoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_decoding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpMsg)
  return target;
}

size_t HttpMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HttpMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += HttpMsg_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> params = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += HttpMsg_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string url = 8;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes body = 10;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // string path = 14;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .HttpMsg.Upgrade upgrade = 12;
  if (this->has_upgrade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upgrade_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 http_major = 2;
  if (this->http_major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_http_major());
  }

  // int32 http_minor = 3;
  if (this->http_minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_http_minor());
  }

  // int32 content_length = 4;
  if (this->content_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_content_length());
  }

  // int32 method = 5;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_method());
  }

  // int32 status_code = 6;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_code());
  }

  // int32 encoding = 7;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_encoding());
  }

  // float keep_alive = 13;
  if (!(this->keep_alive() <= 0 && this->keep_alive() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_decoding = 15;
  if (this->is_decoding() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HttpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HttpMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpMsg)
    MergeFrom(*source);
  }
}

void HttpMsg::MergeFrom(const HttpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HttpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  params_.MergeFrom(from.params_);
  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.has_upgrade()) {
    _internal_mutable_upgrade()->::HttpMsg_Upgrade::MergeFrom(from._internal_upgrade());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.http_major() != 0) {
    _internal_set_http_major(from._internal_http_major());
  }
  if (from.http_minor() != 0) {
    _internal_set_http_minor(from._internal_http_minor());
  }
  if (from.content_length() != 0) {
    _internal_set_content_length(from._internal_content_length());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
  if (from.encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (!(from.keep_alive() <= 0 && from.keep_alive() >= 0)) {
    _internal_set_keep_alive(from._internal_keep_alive());
  }
  if (from.is_decoding() != 0) {
    _internal_set_is_decoding(from._internal_is_decoding());
  }
}

void HttpMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HttpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpMsg::CopyFrom(const HttpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HttpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpMsg::IsInitialized() const {
  return true;
}

void HttpMsg::InternalSwap(HttpMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.Swap(&other->headers_);
  params_.Swap(&other->params_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HttpMsg, is_decoding_)
      + sizeof(HttpMsg::is_decoding_)
      - PROTOBUF_FIELD_OFFSET(HttpMsg, upgrade_)>(
          reinterpret_cast<char*>(&upgrade_),
          reinterpret_cast<char*>(&other->upgrade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HttpMsg_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::HttpMsg_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HttpMsg_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::HttpMsg_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::HttpMsg_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HttpMsg_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::HttpMsg_Upgrade* Arena::CreateMaybeMessage< ::HttpMsg_Upgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HttpMsg_Upgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::HttpMsg* Arena::CreateMaybeMessage< ::HttpMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HttpMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
